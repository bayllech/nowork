services:
  backend:
    build:
      context: ..
      dockerfile: docker/backend.Dockerfile
      target: runner
    image: nowork-backend:latest
    restart: unless-stopped
    env_file:
      - ../.env.prod
    environment:
      - NODE_ENV=production
    volumes:
      - ../data/ip2region.db:/app/ip2region.db:ro
      - ../data/ipv6wry.db:/app/ipv6wry.db:ro
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - appnet

  mysql:
    image: mysql:8.0
    restart: unless-stopped
    command:
      - --default-authentication-plugin=mysql_native_password
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    env_file:
      - ../.env.prod
    ports:
      - "3306:3306"
    volumes:
      - ../data/mysql:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - appnet

  redis:
    image: redis:7.2-alpine
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - ../data/redis:/data
    networks:
      - appnet
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    build:
      context: ..
      dockerfile: docker/frontend.Dockerfile
      target: runner
    image: nowork-frontend:latest
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../logs/nginx:/var/log/nginx
      - ./nginx-ssl.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - appnet

networks:
  appnet:
    driver: bridge
